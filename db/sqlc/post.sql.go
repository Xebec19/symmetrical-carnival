// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: post.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPostById = `-- name: GetPostById :one
select ID, TITLE, content, CREATED_AT from POSTS WHERE ID = $1
`

type GetPostByIdRow struct {
	ID        uuid.UUID    `json:"id"`
	Title     string       `json:"title"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
select ID, TITLE, content, CREATED_AT from POSTS
`

type GetPostsRow struct {
	ID        uuid.UUID    `json:"id"`
	Title     string       `json:"title"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
