// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type PlatformEnum string

const (
	PlatformEnumGoogle  PlatformEnum = "google"
	PlatformEnumDiscord PlatformEnum = "discord"
)

func (e *PlatformEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlatformEnum(s)
	case string:
		*e = PlatformEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for PlatformEnum: %T", src)
	}
	return nil
}

type NullPlatformEnum struct {
	PlatformEnum PlatformEnum
	Valid        bool // Valid is true if PlatformEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatformEnum) Scan(value interface{}) error {
	if value == nil {
		ns.PlatformEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlatformEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatformEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlatformEnum), nil
}

type Comment struct {
	ID        uuid.UUID     `json:"id"`
	PostID    uuid.NullUUID `json:"post_id"`
	AuthorID  string        `json:"author_id"`
	Platform  PlatformEnum  `json:"platform"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
	Body      string        `json:"body"`
}

type Post struct {
	ID        uuid.UUID      `json:"id"`
	Title     string         `json:"title"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	Source    sql.NullString `json:"source"`
	Tags      []string       `json:"tags"`
}
